
Registers:
RA - Accumulator
RB - Register B
PA - Pointer accumulator - generally transient addresses
PB - Pointer B           - generally a longer-lived context structure
PC - Program counter
LR - Link register
CF - Carry flag

# Imm4 instructions
IMM:  RA <- imm4             # Immediate
LBF:  RA <- [PB+imm4]        # Load B field
LAE:  RA <- [PA+RB+imm4]     # Load A element
LAF:  RA <- [PA+imm4]        # Load A field
SPBF: [PB+imm4] <- PA        # Store pointer
SBF:  [PB+imm4] <- RA        # Store B field
SAE:  [PA+RB+imm4] <- RA     # Store A element
SAF:  [PA+imm4] <- RA        # Store A field
SCC:  PC <- PC + imm4        # Skip if carry clear
SCS:  PC <- PC + imm4        # Skip if carry set
AP:   PA <- PA + imm4        # Advance pointer
PBF:  PA <- [PB+imm4]        # Pointer B field
PAE:  PA <- [PA+RB+imm4]     # Pointer A element
PAF:  PA <- [PA+imm4]        # Pointer A field

# Opcode-only instructions
RX:   RA <-> RB             # Register exchange
PX:   PA <-> PB             # Pointer exchange
AX:   RA <-> PA             # Register-pointer accumulator exchange
PLX:  PA <-> LR
RA2B: RB <- RA
PB2A: PA <- PB
P2R:  RA <- PA
C2A:  RA <- CF
CLn:  (0-3)                 # Carry if RA < n
CLEB:                       # Carry if RA <= RB
CLEBC:                      # Carry if RA <= RB - carry
CLB:                        # Carry if RA < RB
SUB
SBC
ADC
ADD
LINKn: LR := PC+n
SPLIT  RB := RA & 0x0F; RA := RA >> 4
PADD:  PA <- PA + RB
JP:    PC <- PA
RET:   PC <- LR
LSR:   Logical shift right RA by signed # bits in RB: 0-7 = right, 8-15 = left


### Meta interpreter ###

	# Simulated registers
	R_PC	equ 0
	R_RA	equ 1
	R_RB	equ 2
	R_PA	equ 3
	R_PB	equ 4
	R_LR	equ 5
	R_CF	equ 6

	# Handler tables
	H_MAIN	equ 9	# Main handlers
	H_AX	equ 10	# Ax handlers
	H_BX	equ 11	# Bx handlers

	# Vector table
	V_MAIN	equ 12  # MAIN_LOOP
	V_RET	equ 13  # MAIN_RETURN
	V_ALU	equ 14	# PREP_ALU_REGS
	V_CARRY	equ 15	# SET_CARRY_AND_RETURN

	.org 0x20
MAIN_LOOP:
	# PB points to context
	PBF	R_PC
	LAF	0	# Load instruction
	AP	1
	SPBF	R_PC	# Advance PC
	SPLIT
	RX		# RA = lo4, RB = hi4
	PBF	H_MAIN
	PAE	0	# PA = handler address
	RX		# RA = hi4, RB = lo4
	LINK	1
	JP
MAIN_RETURN:
	# Return from handler
	PBF	V_MAIN
	JP

PREP_ALU_REGS: # Subroutine to load interpreter RA, RB, CF into actual cpu registers
	LBF	R_CF
	RX
	IMM	0
	CLB		# CF is loaded
	LBF	R_RB
	RX
	LBF	R_RA	# RA and RB loaded
	RET

SET_CARRY_AND_RETURN:
	C2A
	SBF	R_CF
	PBF	V_RET
	JP

	## Opcode implementations ##

O_IMM:
	SBF	R_RA
	RET

O_LBF:
	PBF	R_PB
	PAE	0	# PA is [PB+imm4]
	SPBF	R_RA
	RET

O_LAE: # UNUSED
	LBF	R_PA
	ADD
	RX		# RB is PA+imm4
	PBF	R_RB	# PA is RB
	PAE	0	# PA is [PA+RB+imm4]
	SPBF	R_RA
	RET

O_LAF: # USED ONCE
	PBF	R_PA
	PAE	0	# PA is [PA+imm4]
	SPBF	R_RA
	RET

O_SPBF:
	PBF	R_PB
	LBF	R_PA	# RA is PA
	SAE	0	# Store to [PB+imm4]
	RET

O_SBF:
	PBF	R_PB
	LBF	R_RA	# RA is RA
	SAE	0	# Store to [PB+imm4]
	RET

O_SAE:
	LBF	R_PA
	ADD		# RA is PA+imm4
	RX		# RB is PA+imm4
	PBF	R_RB	# PA is RB
	LBF	R_RA
	SAE	0	# Store to [PA+RB+imm4]
	RET

O_SAF:
	PBF	R_PA
	LBF	R_RA
	SAE	0	# Store to [PA+imm4]
	RET

O_SCC:
	LBF	R_CF
	CL	1
	SCS	3	# Ironic
	PBF	R_PC
	PADD
	SPBF	R_PC
	RET

O_SCS:
	LBF	R_CF
	CL	1
	SCC	3	# Ironic
	PBF	R_PC
	PADD
	SPBF	R_PC
	RET

AX_TRAMPOLINE:
	PBF	H_AX
	PAE	0
	JP

BX_TRAMPOLINE:
	PBF	H_BX
	PAE	0
	JP

O_AP:
	PBF	R_PA
	PADD
	SPBF	R_PA
	RET

O_PBF:
	PBF	R_PB
	PAE		# PA is [PB+imm4]
	SPBF	R_PA
	RET

O_PAE:
	LBF	R_PA
	ADD		# RA is PA+imm4
	RX		# RB is PA+imm4
	PBF	R_RB	# PA is RB
	LBF	R_PA
	SAE	0	# Store to [PA+RB+imm4]
	RET

O_PAF:
	PBF	R_PA
	LBF	R_PA
	SAE	0	# Store to [PA+imm4]
	RET

O_LINK:
	LBF	R_PC
	ADD
	SBF	R_LR
	RET

O_PX:
	LBF	R_PA
	PBF	R_PB
	SPBF	R_PA
	SBF	R_PB
	RET

O_PLX:
	LBF	R_PA
	PBF	R_LR
	SPBF	R_PA
	SBF	R_LR
	RET

O_SBC:
	PBF	V_ALU
	JP
	SBC
	SBF	R_RA
	PBF	V_CARRY
	JP

O_SUB:
	PBF	V_ALU
	JP
	SUB
	SBF	R_RA
	PBF	V_CARRY
	JP

O_C2A:
	LBF	R_CF
	SBF	R_RA
	RET

O_RX:
	LBF	R_RA
	PBF	R_RB
	SPBF	R_RA
	SBF	R_RB
	RET

O_AX: # UNUSED
	LBF	R_PA
	PBF	R_RA
	SPBF	R_PA
	SBF	R_RA
	RET

O_RA2B:
	LBF	R_RA
	SBF	R_RB
	RET

O_ADC:
	PBF	V_ALU
	JP
	ADC
	SBF	R_RA
	PBF	V_CARRY
	JP

O_ADD:
	PBF	V_ALU
	JP
	ADD
	SBF	R_RA
	PBF	V_CARRY
	JP

O_PADD:
	LBF	R_RB
	RX
	LBF	R_PA
	ADD
	SBF	R_PA
	RET

O_CL:
	LBF	R_RA
	CLB		# B contains the imm4
	PBF	V_CARRY
	JP

O_RET:
	LBF	R_LR
	SBF	R_PC
	RET

O_CLEB:
	PBF	V_ALU
	JP
	CLEB
	PBF	V_CARRY
	JP

O_CLEBC:
	PBF	V_ALU
	JP
	CLEBC
	PBF	V_CARRY
	JP

O_CLB:
	PBF	V_ALU
	JP
	CLB
	PBF	V_CARRY
	JP

O_P2R:
	LBF	R_PA
	SBF	R_RA
	RET

O_PB2A:
	LBF	R_PB
	SBF	R_PA
	RET

O_JP:
	LBF	R_PA
	SBF	R_PC
	RET

O_HALT:
	HALT

O_LSR:
	PBF	V_ALU
	JP
	LSR
	SBF	R_RA
	RET

O_SPLIT:
	PBF	V_ALU
	JP
	SPLIT
	SBF	R_RA
	RX
	SBF	R_RB
	RET

MAIN_HANDLERS:
	IMM	O_IMM
	IMM	O_LBF
	IMM	O_LAE
	IMM	O_LAF

	IMM	O_SPBF
	IMM	O_SBF
	IMM	O_SAE
	IMM	O_SAF

	IMM	O_SCC
	IMM	O_SCS
	IMM	AX_TRAMPOLINE
	IMM	BX_TRAMPOLINE

	IMM	O_AP
	IMM	O_PBF
	IMM	O_PAE
	IMM	O_PAF

AX_HANDLERS:
	IMM	O_LINK
	IMM	O_LINK
	IMM	O_LINK
	IMM	O_LINK

	IMM	O_PX
	IMM	O_PLX
	IMM	O_SBC
	IMM	O_SUB

	IMM	O_C2A
	IMM	O_RX
	IMM	O_AX	# aa
	IMM	O_RA2B	# ab

	IMM	O_ADC
	IMM	O_ADD
	IMM	O_PADD
	IMM	0xFF

BX_HANDLERS:
	IMM	O_CL
	IMM	O_CL
	IMM	O_CL
	IMM	O_CL

	IMM	O_RET	# b4 - this is not negotiable
	IMM	O_CLEB
	IMM	O_CLEBC
	IMM	O_CLB

	IMM	O_P2R
	IMM	0XFF
	IMM	O_PB2A	# ba
	IMM	0xFF

	IMM	O_JP
	IMM	O_HALT	# bd - "be dormant / be done"
	IMM	O_LSR
	IMM	O_SPLIT	# bf - needs to end in an f


	# Initialization
	.org	0x00
	# Registers
	IMM	0x10	# Initial PC
	IMM	0
	IMM	0
	IMM	0

	IMM	0
	IMM	0
	IMM	0
	IMM	0

	IMM	0
	IMM	MAIN_HANDLERS
	IMM	AX_HANDLERS
	IMM	BX_HANDLERS

	IMM	MAIN_LOOP
	IMM	MAIN_RETURN
	IMM	PREP_ALU_REGS
	IMM	SET_CARRY_AND_RETURN


